const { cmd } = require('../command');
const yts = require('yt-search');
const ytdl = require('ytdl-core');

// Temporary in-memory store
let userSelections = {};

cmd({
    pattern: 'song5',
    desc: 'Search and download song from YouTube',
    category: 'downloader',
    filename: __filename
}, async (conn, mek, m, { text, from, reply }) => {
    try {
        if (!text) return reply('‚ùå ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª song name ‡∂ë‡∂ö‡∂ö‡∑ä type ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.');

        // Search YouTube
        const r = await yts(text);
        const vid = r.videos[0]; // first result
        if (!vid) return reply('‚ùå ‡∂ö‡∑í‡∑É‡∑í‡∂∏ song result ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.');

        // Save user selection
        userSelections[from] = {
            title: vid.title,
            url: vid.url,
            seconds: vid.seconds,
            views: vid.views,
            author: vid.author.name
        };

        // Send menu
        const msg = `*üéß HIRU X MD SONG DOWNLOADER*\n\n` +
        `*‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ*\n` +
        `*‚îÉ üìå Title:* ${vid.title}\n` +
        `*‚îÉ ‚è∞ Duration:* ${Math.floor(vid.seconds/60)}:${vid.seconds%60}\n` +
        `*‚îÉ üë§ Author:* ${vid.author.name}\n` +
        `*‚îÉ üëÄ Views:* ${vid.views}\n` +
        `*‚îÉ üìé URL:* ${vid.url}\n` +
        `*‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ*\n\n` +
        `Reply with number:\n1 | Audio üéß\n2 | Document üìÇ\n3 | Voice Note üéôÔ∏è`;

        reply(msg);

    } catch (e) {
        console.log(e);
        reply('‚ùå Error: ' + e);
    }
});

// Handle reply numbers
cmd({
    pattern: '^[1-3]$',
    desc: 'Download song after user selection',
    category: 'downloader',
    filename: __filename
}, async (conn, mek, m, { text, from, reply }) => {
    try {
        const info = userSelections[from];
        if (!info) return reply('‚ùå Song selection not found. Use the song command first.');

        const stream = ytdl(info.url, { filter: 'audioonly' });

        if (text === '1') {
            await conn.sendMessage(from, { audio: stream, mimetype: 'audio/mp4', ptt: false }, { quoted: mek });
        } else if (text === '2') {
            await conn.sendMessage(from, { document: stream, mimetype: 'audio/mp4', fileName: `${info.title}.mp3` }, { quoted: mek });
        } else if (text === '3') {
            await conn.sendMessage(from, { audio: stream, mimetype: 'audio/mp4', ptt: true }, { quoted: mek });
        }

        // Clear user selection
        delete userSelections[from];

    } catch (e) {
        console.log(e);
        reply('‚ùå Error: ' + e);
    }
});
